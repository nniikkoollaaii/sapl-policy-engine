<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="sapl" nsURI="http://sapl.io/sapl/SAPL" nsPrefix="sapl">
  <eClassifiers xsi:type="ecore:EClass" name="SAPL" eSuperTypes="#//Matchable #//AuthorizationDecisionEvaluable">
    <eOperations name="fetchFunctionImports" eType="#//StringMap" eExceptions="#//PolicyEvaluationException">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The method returns a map of full qualified function names by their short names (or library alias plus short name) for all function imports of the SAPL document depending on the functions available in the given function context.&#xA;&#xA;@param functionCtx &#xA;&#x9;&#x9;the function context&#xA;@returns &#xA;&#x9;&#x9;a map of full qualified function names by their short names for all function imports of the SAPL document.&#xA;@throws PolicyEvaluationException in case an error occurs while evaluating the import statements and creating the map"/>
      </eAnnotations>
      <eParameters name="functionCtx" eType="#//FunctionContext"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="imports" upperBound="-1"
        eType="#//Import" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="policyElement" eType="#//PolicyElement"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Import">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="libSteps" unique="false"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="functionName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PolicyElement" eSuperTypes="#//Matchable #//AuthorizationDecisionEvaluable">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="saplName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="targetExpression" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PolicySet" eSuperTypes="#//PolicyElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="algorithm" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="valueDefinitions" upperBound="-1"
        eType="#//ValueDefinition" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="policies" upperBound="-1"
        eType="#//Policy" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Policy" eSuperTypes="#//PolicyElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="entitlement" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="#//PolicyBody"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obligation" eType="#//Expression"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="advice" eType="#//Expression"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="transformation" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PolicyBody">
    <eOperations name="evaluate" eType="#//DecisionFlux">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The method evaluates all statements of the policy body in the given context and returns a flux of Decisions.&#xA;&#xA;@param entitlement &#xA;&#x9;&#x9;the entitlement of the enclosing policy&#xA;@param ctx &#xA;&#x9;&#x9;the evaluation context&#xA;@returns &#xA;&#x9;&#x9;a flux of authorisation decisions based on the stamtents in the policy body"/>
      </eAnnotations>
      <eParameters name="entitlement" eType="#//Decision"/>
      <eParameters name="ctx" eType="#//EvaluationContext"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="statements" upperBound="-1"
        eType="#//Statement" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Statement"/>
  <eClassifiers xsi:type="ecore:EClass" name="ValueDefinition" eSuperTypes="#//Statement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="eval" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Expression" eSuperTypes="#//Evaluable #//Hashable"/>
  <eClassifiers xsi:type="ecore:EClass" name="BasicExpression" eSuperTypes="#//Expression">
    <eStructuralFeatures xsi:type="ecore:EReference" name="filter" eType="#//FilterComponent"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subtemplate" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BasicRelative" eSuperTypes="#//BasicExpression">
    <eStructuralFeatures xsi:type="ecore:EReference" name="steps" upperBound="-1"
        eType="#//Step" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Arguments" eSuperTypes="#//Hashable">
    <eStructuralFeatures xsi:type="ecore:EReference" name="args" upperBound="-1" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Step" eSuperTypes="#//Hashable">
    <eOperations name="apply" lowerBound="1" eType="#//ResultNodeFlux">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The method performs the selection step on a result tree to arrive at a new result tree.&#xA;The new result trees are provided by the returned Flux.&#xA;&#xA;@param previousResult &#xA;&#x9;&#x9;the root node of the previous result tree&#xA;@param ctx&#xA;&#x9;&#x9;the evaluation context&#xA;@param isBody&#xA;&#x9;&#x9;true if the step is evaluated for an expression which occurs inside of the policy body. &#xA;&#x9;&#x9;Needs to be specified because certain steps (like attribute finder steps) are not allowed in the target expression.&#xA;@param relativeNode &#xA;&#x9;&#x9;the JsonNode a relative expression without selection steps would evaluate to&#xA;@returns &#xA;&#x9;&#x9;the root node of the new result tree"/>
      </eAnnotations>
      <eParameters name="previousResult" eType="#//AbstractAnnotatedJsonNode"/>
      <eParameters name="ctx" eType="#//EvaluationContext"/>
      <eParameters name="isBody" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="relativeNode" eType="#//OptionalJsonNode"/>
    </eOperations>
    <eOperations name="apply" lowerBound="1" eType="#//ResultNodeFlux">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The method performs the selection step on a result tree to arrive at a new result tree.&#xA;The new result trees are provided by the returned Flux.&#xA;&#xA;@param previousResult &#xA;&#x9;&#x9;the root node of the previous result tree&#xA;@param ctx&#xA;&#x9;&#x9;the evaluation context&#xA;@param isBody&#xA;&#x9;&#x9;true if the step is evaluated for an expression which occurs inside of the policy body. &#xA;&#x9;&#x9;Needs to be specified because certain steps (like attribute finder steps) are not allowed in the target expression.&#xA;@param relativeNode &#xA;&#x9;&#x9;the JsonNode a relative expression without selection steps would evaluate to&#xA;@returns &#xA;&#x9;&#x9;the root node of the new result tree"/>
      </eAnnotations>
      <eParameters name="previousResult" eType="#//ArrayResultNode"/>
      <eParameters name="ctx" eType="#//EvaluationContext"/>
      <eParameters name="isBody" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="relativeNode" eType="#//OptionalJsonNode"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UnionStep" eSuperTypes="#//Step"/>
  <eClassifiers xsi:type="ecore:EClass" name="Value" eSuperTypes="#//Evaluable #//Hashable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Pair">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="key" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FilterComponent" eSuperTypes="#//Hashable">
    <eOperations name="apply" lowerBound="1" eType="#//OptionalJsonNodeFlux">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The method applies the filter to a JSON tree and returns a Flux providing the filtered trees.&#xA;&#xA;@param unfilteredRootNode &#xA;&#x9;&#x9;the root node of the tree to be filtered&#xA;@param ctx&#xA;&#x9;&#x9;the evaluation context&#xA;@param isBody&#xA;&#x9;&#x9;true if the expression occurs within the policy body (attribute&#xA;&#x9;&#x9;finder steps are only allowed if set to true)&#xA;@param relativeNode &#xA;&#x9;&#x9;the JsonNode a relative expression without selection steps would evaluate to&#xA;@returns &#xA;&#x9;&#x9;the root node of the filtered tree"/>
      </eAnnotations>
      <eParameters name="unfilteredRootNode" eType="#//OptionalJsonNode"/>
      <eParameters name="ctx" eType="#//EvaluationContext"/>
      <eParameters name="isBody" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="relativeNode" eType="#//OptionalJsonNode"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FilterStatement" eSuperTypes="#//Hashable">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="each" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="#//BasicRelative"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="fsteps" unique="false"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="arguments" eType="#//Arguments"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WildcardImport" eSuperTypes="#//Import"/>
  <eClassifiers xsi:type="ecore:EClass" name="LibraryImport" eSuperTypes="#//Import">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="libAlias" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Condition" eSuperTypes="#//Statement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BinaryOperator" eSuperTypes="#//Expression">
    <eStructuralFeatures xsi:type="ecore:EReference" name="left" eType="#//Expression"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="right" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UnaryOperator" eSuperTypes="#//Expression">
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Plus" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Minus" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Or" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="EagerOr" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Multi" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Div" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="And" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="EagerAnd" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Equals" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="NotEquals" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Regex" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Less" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="LessEquals" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="More" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="MoreEquals" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="ElementOf" eSuperTypes="#//BinaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Not" eSuperTypes="#//UnaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="UnaryMinus" eSuperTypes="#//UnaryOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="BasicGroup" eSuperTypes="#//BasicExpression">
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="#//Expression"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="steps" upperBound="-1"
        eType="#//Step" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BasicValue" eSuperTypes="#//BasicExpression">
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" eType="#//Value"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="steps" upperBound="-1"
        eType="#//Step" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BasicFunction" eSuperTypes="#//BasicExpression">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="fsteps" unique="false"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="arguments" eType="#//Arguments"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="steps" upperBound="-1"
        eType="#//Step" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BasicIdentifier" eSuperTypes="#//BasicExpression">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="identifier" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="steps" upperBound="-1"
        eType="#//Step" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="KeyStep" eSuperTypes="#//Step">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="id" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WildcardStep" eSuperTypes="#//Step"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeFinderStep" eSuperTypes="#//Step">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="idSteps" unique="false"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RecursiveKeyStep" eSuperTypes="#//Step">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="id" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RecursiveWildcardStep" eSuperTypes="#//Step"/>
  <eClassifiers xsi:type="ecore:EClass" name="RecursiveIndexStep" eSuperTypes="#//Step">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="index" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigDecimal"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IndexStep" eSuperTypes="#//Step">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="index" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigDecimal"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ArraySlicingStep" eSuperTypes="#//Step">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="index" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigDecimal"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="to" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigDecimal"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="step" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigDecimal"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExpressionStep" eSuperTypes="#//Step">
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConditionStep" eSuperTypes="#//Step">
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="#//Expression"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IndexUnionStep" eSuperTypes="#//UnionStep">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="indices" unique="false"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigDecimal"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeUnionStep" eSuperTypes="#//UnionStep">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="attributes" unique="false"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object" eSuperTypes="#//Value">
    <eStructuralFeatures xsi:type="ecore:EReference" name="members" upperBound="-1"
        eType="#//Pair" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Array" eSuperTypes="#//Value">
    <eStructuralFeatures xsi:type="ecore:EReference" name="items" upperBound="-1"
        eType="#//Expression" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TrueLiteral" eSuperTypes="#//Value"/>
  <eClassifiers xsi:type="ecore:EClass" name="FalseLiteral" eSuperTypes="#//Value"/>
  <eClassifiers xsi:type="ecore:EClass" name="NullLiteral" eSuperTypes="#//Value"/>
  <eClassifiers xsi:type="ecore:EClass" name="UndefinedLiteral" eSuperTypes="#//Value"/>
  <eClassifiers xsi:type="ecore:EClass" name="StringLiteral" eSuperTypes="#//Value">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NumberLiteral" eSuperTypes="#//Value">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="number" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigDecimal"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FilterSimple" eSuperTypes="#//FilterComponent">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="each" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="fsteps" unique="false"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="arguments" eType="#//Arguments"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FilterExtended" eSuperTypes="#//FilterComponent">
    <eStructuralFeatures xsi:type="ecore:EReference" name="statements" upperBound="-1"
        eType="#//FilterStatement" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Hashable" abstract="true" interface="true">
    <eOperations name="hash" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eParameters name="imports" eType="#//StringMap"/>
    </eOperations>
    <eOperations name="isEqualTo" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="other" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
      <eParameters name="otherImports" eType="#//StringMap"/>
      <eParameters name="imports" eType="#//StringMap"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Evaluable" abstract="true" interface="true">
    <eOperations name="evaluate" lowerBound="1" eType="#//OptionalJsonNodeFlux">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The method returns a Flux of JsonNodes for the evaluation of the expression within a given evaluation context.&#xA;&#xA;@param ctx &#xA;&#x9;&#x9;the evaluation context&#xA;@param isBody &#xA;&#x9;&#x9;true if the expression occurs inside of the policy body. Needs to be specified because &#xA;&#x9;&#x9;certain steps (like attribute finder steps) are not allowed in the target expression.&#xA;@param relativeNode &#xA;&#x9;&#x9;the JsonNode a relative expression without selection steps would evaluate to&#xA;@returns &#xA;&#x9;&#x9;a Flux of JsonNode results of evaluating the expression"/>
      </eAnnotations>
      <eParameters name="ctx" eType="#//EvaluationContext"/>
      <eParameters name="isBody" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="relativeNode" eType="#//OptionalJsonNode"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Matchable" abstract="true" interface="true">
    <eOperations name="matches" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        eExceptions="#//PolicyEvaluationException">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The method returns a flag indicating whether the object it is called on matches the current authorization subscription within the given evaluation context.&#xA;&#xA;@param ctx &#xA;&#x9;&#x9;the evaluation context&#xA;@returns &#xA;&#x9;&#x9;true if the object this method is called on matches the current authorization subscription within the given evaluation context, false otherwise.&#xA;@throws PolicyEvaluationException if an error occurs while evaluating the target expression"/>
      </eAnnotations>
      <eParameters name="ctx" eType="#//EvaluationContext"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AuthorizationDecisionEvaluable" abstract="true"
      interface="true">
    <eOperations name="evaluate" lowerBound="1" eType="#//AuthorizationDecisionFlux">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The method returns a Flux of AuthorizationDecisions for the object that can be evaluated to a SAPL authorization decision.&#xA;&#xA;@param ctx &#xA;&#x9;&#x9;the evaluation context&#xA;@returns&#xA;&#x9;&#x9;a Flux of SAPL authorization decisions"/>
      </eAnnotations>
      <eParameters name="ctx" eType="#//EvaluationContext"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="EvaluationContext" instanceClassName="io.sapl.interpreter.EvaluationContext"/>
  <eClassifiers xsi:type="ecore:EDataType" name="JsonNode" instanceClassName="com.fasterxml.jackson.databind.JsonNode"/>
  <eClassifiers xsi:type="ecore:EDataType" name="JsonNodeFlux" instanceTypeName="reactor.core.publisher.Flux&lt;com.fasterxml.jackson.databind.JsonNode>"
      serializable="false"/>
  <eClassifiers xsi:type="ecore:EDataType" name="AuthorizationDecisionFlux" instanceTypeName="reactor.core.publisher.Flux&lt;io.sapl.api.pdp.AuthorizationDecision>"
      serializable="false"/>
  <eClassifiers xsi:type="ecore:EDataType" name="DecisionFlux" instanceTypeName="reactor.core.publisher.Flux&lt;io.sapl.api.pdp.Decision>"
      serializable="false"/>
  <eClassifiers xsi:type="ecore:EDataType" name="PolicyEvaluationException" instanceClassName="io.sapl.api.interpreter.PolicyEvaluationException"/>
  <eClassifiers xsi:type="ecore:EDataType" name="ResultNodeFlux" instanceTypeName="reactor.core.publisher.Flux&lt;io.sapl.interpreter.selection.ResultNode>"
      serializable="false"/>
  <eClassifiers xsi:type="ecore:EDataType" name="ArrayResultNode" instanceClassName="io.sapl.interpreter.selection.ArrayResultNode"/>
  <eClassifiers xsi:type="ecore:EDataType" name="StringMap" instanceTypeName="java.util.Map&lt;java.lang.String, java.lang.String>"/>
  <eClassifiers xsi:type="ecore:EDataType" name="AbstractAnnotatedJsonNode" instanceClassName="io.sapl.interpreter.selection.AbstractAnnotatedJsonNode"/>
  <eClassifiers xsi:type="ecore:EDataType" name="OptionalJsonNodeFlux" instanceTypeName="reactor.core.publisher.Flux&lt;java.util.Optional&lt;com.fasterxml.jackson.databind.JsonNode>>"/>
  <eClassifiers xsi:type="ecore:EDataType" name="OptionalJsonNode" instanceTypeName="java.util.Optional&lt;com.fasterxml.jackson.databind.JsonNode>"/>
  <eClassifiers xsi:type="ecore:EDataType" name="AuthorizationSubscription" instanceClassName="io.sapl.api.pdp.AuthorizationSubscription"
      serializable="false"/>
  <eClassifiers xsi:type="ecore:EDataType" name="FunctionContext" instanceClassName="io.sapl.interpreter.functions.FunctionContext"
      serializable="false"/>
  <eClassifiers xsi:type="ecore:EDataType" name="AuthorizationDecision" instanceClassName="io.sapl.api.pdp.AuthorizationDecision"
      serializable="false"/>
  <eClassifiers xsi:type="ecore:EDataType" name="Decision" instanceClassName="io.sapl.api.pdp.Decision"/>
</ecore:EPackage>
